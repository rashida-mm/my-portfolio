                Responsive Portfolio
        -------------------------------------------

    API Endpoint:

    Tech Stack:
        React
        Node-Express
 
    1.Project Creation - npx create-react-app portfolio
    2.cd portfolio
    3.code .
    4. Run Project - npm start
    5. Clear the unwanted codes
    6. Install 3rd party libraries
            i) React Bootstrap - npm install react-bootstrap bootstrap
            (Paste it into index.html) - <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" 
            crossorigin="anonymous"/> 
            ii) MDB Bootstrap - npm i mdb-react-ui-kit
            iii) Fontawsome -npm i @fortawesome/fontawesome-free
            In Index.js - 
                import 'mdb-react-ui-kit/dist/css/mdb.min.css';
                import "@fortawesome/fontawesome-free/css/all.min.css";
            iv) Bootswatch 
            import './bootstrap.min.css' to index.js  
            v) Google Fonts
    7. Components Creation 
        Operations:
            - 
    8. Path setup
            Installation - npm i react-router-dom
            import {BrowserRouter} from 'react-router-dom' - index.js
            enclose app in BrowserRouter
                <BrowserRouter>
                <App />
                </BrowserRouter>
    9. Backend Creation
            json-server is an npm(Node Package Manager) module, used for creating a mock REST API effortlessly. 
                1.create a Backend folder
                
                2.create a package.json file(metdata) : npm init -y
                
                3.data stored in mongodb (json)
                
                4.create index.js file - its our main file
                
                //to create node modules - npm i -g json-server (not used here)
                here we use express instead of json server
                5.create application using express : npm i express (automatically generates node modules)
                    With express js, you can create an API very easily for the server.
                    ExpressJS includes significant features that let you dynamically create a back-end API. 
                    It doesn't require any third-party dependencies and doesn't come with any frameworks or plugin
                
                6.CORS : npm i cors
                    >using this we connect the port of frontend in backend .
                    >The word CORS stands for “Cross-Origin Resource Sharing”.
                    >Cross-Origin Resource Sharing is an HTTP-header based 
                    mechanism implemented by the browser which allows a server
                    or an API(Application Programming Interface) to indicate 
                    any origins (different in terms of protocol, hostname, or
                    port) other than its origin from which the unknown origin
                    gets permission to access and load resources.

                npm i express cors - to install both
                7.come and complete the code on index.js
                    -import express
                    -import cors
                    -create an app in backend
                        const contactServer = express() (this function creates a application in backend called contactServer)
                    -connect backend with frontend

                8.install node mon : npm i -g nodemon
                    continues updation of bakcned

                9.connecting our database (mongodb) and backend i.e(mongodb+node connection)
                    >mongoose library is used to connect to node and mongodb
                    >npm i mongoose

                10.create a service folder in backend 
                    >inside it create a file named as db.js - for connecting node and mongodb

                11.create a model and schema in Backend,inside the db.json
                            Backend                     mongodb
                        ---------------             ---------------
                    model - employee               collection - employees
                    schema - key value pairsle 
                    key is called scheme {id:string,
                                name:string...}

                12.create a logic.js file for implementing backend logic.(inside the service folder)
                
                13.import logic.js to index.js 
                
                14.Route setting
                    localhost:8000/get-all-employees -> all employee details 
                    present in mongodb(in index.js)
                
                15.get all contacts by api fetching to frontend
                
